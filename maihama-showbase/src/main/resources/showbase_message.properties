
# ========================================================================================
#                                                                        Framework Default
#                                                                        =================
# Overriding framework messages for client-managed message
#
# ----------------------------------------------------------
#                                            Javax Validator
#                                            ---------------
# @Override
constraints.AssertFalse.message = ASSERT_FALSE :: must be false
# @Override
constraints.AssertTrue.message  = ASSERT_TRUE :: must be true
# @Override inclusive statement to avoid parameter mismatch with super properties
constraints.DecimalMax.message  = DECIMAL_MAX | inclusive:${inclusive == true ? 'true' : 'false'}, max:{value} :: must be less than ${inclusive == true ? 'or equal to ' : ''}$$max$$
# @Override me too
constraints.DecimalMin.message  = DECIMAL_MIN | inclusive:${inclusive == true ? 'true' : 'false'}, min:{value} :: must be greater than ${inclusive == true ? 'or equal to ' : ''}$$min$$
# @Override
constraints.Digits.message      = DIGITS | integer:{integer}, fraction:{fraction} :: numeric value out of bounds (<$$integer$$ digits>.<$$fraction$$ digits> expected)
# @Override
constraints.Future.message      = FUTURE :: must be in the future
# @Override
constraints.Max.message         = MAX | max:{value} :: must be less than or equal to $$max$$
# @Override
constraints.Min.message         = MIN | min:{value} :: must be greater than or equal to $$min$$
# @Override
constraints.NotBlank.message    = NOT_BLANK :: may not be empty
# @Override
constraints.NotEmpty.message    = NOT_EMPTY :: may not be empty
# @Override
constraints.NotNull.message     = NOT_NULL :: may not be null
# @Override
constraints.Null.message        = NULL :: must be null
# @Override
constraints.Past.message        = PAST :: must be in the past
# @Override
constraints.Pattern.message     = PATTERN :: invalid format
# @Override
constraints.Size.message        = SIZE | min:{min}, max:{max} :: size must be between $$min$$ and $$max$$

# ----------------------------------------------------------
#                                        Hibernate Validator
#                                        -------------------
# @Override
constraints.CreditCardNumber.message        = CREDIT_CARD_NUMBER :: invalid credit card number
# @Override
constraints.EAN.message                     = EAN | type:{type} :: invalid $$type$$ barcode
# @Override
constraints.Email.message                   = EMAIL :: not a well-formed email address
# @Override
constraints.Length.message                  = LENGTH | min:{min}, max:{max} :: length must be between $$min$$ and $$max$$
# @Override
constraints.LuhnCheck.message               = LuhnCheck | unused for now so parse failure, ${value} for freegen :: The check digit for $$value$$ is invalid, Luhn Modulo 10 checksum failed
# @Override
constraints.Mod10Check.message              = Mod10Check | unused for now so parse failure, ${value} for freegen :: The check digit for $$value$$ is invalid, Modulo 10 checksum failed
# @Override
constraints.Mod11Check.message              = Mod11Check | unused for now so parse failure, ${value} for freegen :: The check digit for $$value$$ is invalid, Modulo 11 checksum failed
# @Override
constraints.ModCheck.message                = ModCheck | unused for now so parse failure, ${value} ${modType} for freegen :: The check digit for $$value$$ is invalid, $$modType$$ checksum failed
# @Override
constraints.ParametersScriptAssert.message  = PARAMETERS_SCRIPT_ASSERT | script:"{script}" :: script expression "$$script$$" didn't evaluate to true
# @Override
constraints.Range.message                   = RANGE | min:{min}, max:{max} :: must be between $$min$$ and $$max$$
# @Override
constraints.SafeHtml.message                = SAFE_HTML :: may have unsafe html content
# @Override
constraints.ScriptAssert.message            = SCRIPT_ASSERT | script:"{script}" :: script expression "$$script$$" didn't evaluate to true
# @Override
constraints.URL.message                     = URL :: must be a valid URL
# @Override
constraints.Required.message                = REQUIRED :: is required
# @Override
constraints.TypeAny.message                 = TYPE_ANY | type:{propertyType} :: should be $$type$$
# @Override
constraints.TypeInteger.message             = TYPE_NUMBER :: should be number
# @Override
constraints.TypeLong.message                = TYPE_NUMBER :: should be number
# @Override
constraints.TypeLocalDate.message           = TYPE_DATE :: should be date
# @Override
constraints.TypeLocalDateTime.message       = TYPE_DATETIME :: should be date-time
# @Override
constraints.TypeBoolean.message             = TYPE_BOOLEAN :: should be boolean

# ----------------------------------------------------------
#                                      Application Exception
#                                      ---------------------
# /- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# six framework-embedded messages (don't change key names)
# - - - - - - - - - -/
# @Override
errors.login.failure=LOGIN_FAILURE :: could not login
# @Override
errors.app.illegal.transition=ILLEGAL_TRANSITION :: retry because of illegal transition
# @Override
errors.app.db.already.deleted=ALREADY_DELETED :: others might be deleted, so retry
# @Override
errors.app.db.already.updated=ALREADY_UPDATED :: others might be updated, so retry
# @Override
errors.app.db.already.exists=ALREADY_EXISTS :: already existing data, so retry
# @Override
errors.app.double.submit.request=DOUBLE_SUBMIT :: double submit might be requested


# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
# you can define your messages here:
# e.g.
#  errors.xxx = ...
#  info.xxx = ...
# _/_/_/_/_/_/_/_/_/_/
# ========================================================================================
#                                                                                  General
#                                                                                  =======
# ----------------------------------------------------------
#                                      Application Validator
#                                      ---------------------
# e.g. 
#  org.docksidestage.validator.constraints.SeaLand.message = SEA_LAND

# ----------------------------------------------------------
#                                      Application Exception
#                                      ---------------------
# framework does not have own message so define here, used in your ApiFailureHook
errors.login.required=LOGIN_REQUIRED :: login is required

# for no-message application exception, basically should not be used
errors.unknown.business.error=UNKNOWN_BUSINESS_ERROR :: unknown business error


# ========================================================================================
#                                                                                  Sign up
#                                                                                  =======
errors.signup.account.already.exists=SIGNUP_ACCOUNT_ALREADY_EXISTS :: the account already exists


# ========================================================================================
#                                                                                 Anything
#                                                                                 ========

